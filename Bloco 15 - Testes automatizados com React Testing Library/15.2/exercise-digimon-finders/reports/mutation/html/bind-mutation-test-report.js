document.querySelector('mutation-test-report-app').report = {"files":{"/home/renzo/Trybe/exercise-digimon-finders/src/App.js":{"language":"javascript","mutants":[{"id":"0","location":{"end":{"column":6,"line":12},"start":{"column":18,"line":8}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Ignored","description":"Ignore reason: Ignored because of excluded mutation \"ObjectLiteral\""},{"id":"6","location":{"end":{"column":6,"line":19},"start":{"column":31,"line":16}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Ignored","description":"Ignore reason: Ignored because of excluded mutation \"ObjectLiteral\""},{"id":"15","location":{"end":{"column":10,"line":32},"start":{"column":54,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Ignored","description":"Ignore reason: Ignored because of excluded mutation \"ObjectLiteral\""},{"id":"1","location":{"end":{"column":24,"line":9},"start":{"column":22,"line":9}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed","description":"Killed by: Teste da aplicação toda renders App"},{"id":"2","location":{"end":{"column":24,"line":10},"start":{"column":19,"line":10}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed","description":"Killed by: Teste da aplicação toda renders App"},{"id":"3","location":{"end":{"column":23,"line":11},"start":{"column":21,"line":11}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed","description":"Killed by: Teste da aplicação toda renders App"},{"id":"4","location":{"end":{"column":4,"line":20},"start":{"column":27,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: Teste da aplicação toda type a Digimon"},{"id":"8","location":{"end":{"column":22,"line":24},"start":{"column":9,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: Teste da aplicação toda doesnt call fetch when search is empty"},{"id":"5","location":{"end":{"column":7,"line":19},"start":{"column":19,"line":16}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed","description":"Killed by: Teste da aplicação toda type a Digimon"},{"id":"7","location":{"end":{"column":4,"line":34},"start":{"column":32,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: Teste da aplicação toda fetch Digimon"},{"id":"11","location":{"end":{"column":79,"line":25},"start":{"column":13,"line":25}},"mutatorName":"StringLiteral","replacement":"``","status":"Killed","description":"Killed by: Teste da aplicação toda fetch Digimon"},{"id":"12","location":{"end":{"column":34,"line":26},"start":{"column":15,"line":26}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed","description":"Killed by: Teste da aplicação toda fetch Digimon"},{"id":"9","location":{"end":{"column":22,"line":24},"start":{"column":9,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: Teste da aplicação toda fetch Digimon"},{"id":"10","location":{"end":{"column":6,"line":33},"start":{"column":24,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: Teste da aplicação toda fetch Digimon"},{"id":"16","location":{"end":{"column":43,"line":30},"start":{"column":33,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed","description":"Killed by: Teste da aplicação toda fetch wrong Digimon"},{"id":"13","location":{"end":{"column":12,"line":32},"start":{"column":15,"line":27}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Timeout"},{"id":"18","location":{"end":{"column":4,"line":59},"start":{"column":12,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: Teste da aplicação toda renders App"},{"id":"17","location":{"end":{"column":27,"line":31},"start":{"column":23,"line":31}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed","description":"Killed by: Teste da aplicação toda fetch Digimon"},{"id":"20","location":{"end":{"column":38,"line":53},"start":{"column":11,"line":53}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: Teste da aplicação toda renders App"},{"id":"14","location":{"end":{"column":11,"line":32},"start":{"column":42,"line":27}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Timeout"},{"id":"22","location":{"end":{"column":38,"line":53},"start":{"column":11,"line":53}},"mutatorName":"LogicalOperator","replacement":"isFetching || !errorMessage","status":"Killed","description":"Killed by: Teste da aplicação toda renders App"},{"id":"19","location":{"end":{"column":66,"line":43},"start":{"column":21,"line":43}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed","description":"Killed by: Teste da aplicação toda type a Digimon"},{"id":"21","location":{"end":{"column":38,"line":53},"start":{"column":11,"line":53}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: Teste da aplicação toda fetch Digimon"},{"id":"23","location":{"end":{"column":38,"line":53},"start":{"column":25,"line":53}},"mutatorName":"BooleanLiteral","replacement":"errorMessage","status":"Killed","description":"Killed by: Teste da aplicação toda fetch Digimon"},{"id":"24","location":{"end":{"column":53,"line":55},"start":{"column":18,"line":55}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: Teste da aplicação toda renders App"},{"id":"27","location":{"end":{"column":53,"line":55},"start":{"column":34,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed","description":"Killed by: Teste da aplicação toda renders App"},{"id":"25","location":{"end":{"column":53,"line":55},"start":{"column":18,"line":55}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: Teste da aplicação toda renders App"},{"id":"26","location":{"end":{"column":53,"line":55},"start":{"column":18,"line":55}},"mutatorName":"LogicalOperator","replacement":"errorMessage && 'Faça uma pesquisa'","status":"Killed","description":"Killed by: Teste da aplicação toda renders App"}],"source":"import React from 'react';\nimport './App.css';\nimport Digimon from './Digimon';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { \n      searchDigimon: '', \n      isFetching: false, \n      errorMessage: '' \n    };\n  }\n\n  inputValue = (value) => {\n    this.setState((state) => ({\n      ...state,\n      searchDigimon: value,\n    }));\n  }\n\n  requestDigimon = async () => {\n    const { searchDigimon } = this.state;\n    if (searchDigimon) {\n      fetch(`https://digimon-api.vercel.app/api/digimon/name/${searchDigimon}`)\n        .then((res) => res.json())\n        .then((results) => this.setState((state) => ({\n          ...state,\n          digimon: results[0],\n          errorMessage: results[\"ErrorMsg\"],\n          isFetching: true,\n        })));\n    }\n  }\n\n  render() {\n    const { digimon, searchDigimon, isFetching, errorMessage } = this.state;\n    return (\n      <div className=\"App\">\n        <input\n          value={searchDigimon}\n          type=\"text\"\n          onChange={({ target }) => this.inputValue(target.value)}\n          data-testid=\"input\"\n        />\n        <button\n          data-testid=\"buttonSearch\"\n          onClick={this.requestDigimon}\n          type=\"button\"\n        >\n          Search Digimon\n        </button>\n        { isFetching && !errorMessage\n          ? <Digimon digimon={digimon} />\n          : <h1>{errorMessage || 'Faça uma pesquisa'}</h1>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null}};